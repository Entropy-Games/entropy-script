import{Node}from"../runtime/nodes.js";import{ESPrimitive}from"../runtime/primitiveTypes.js";export function deepClone(e,t=new WeakMap){if(Object(e)!==e||e instanceof Function)return e;if(t.has(e))return t.get(e);try{var n=new e.constructor}catch(t){n=Object.create(Object.getPrototypeOf(e))}return e instanceof Map?Array.from(e,(([e,r])=>n.set(deepClone(e,t),deepClone(r,t)))):e instanceof Set&&Array.from(e,(e=>n.add(deepClone(e,t)))),t.set(e,n),Object.assign(n,...Object.keys(e).map((n=>({[n]:deepClone(e[n],t)}))))}export function str(e,t=0){if("string"==typeof e)return e;if(t>20)return"...";let n="";if(void 0===e)return"undefined";if(e instanceof ESPrimitive)return e.str().valueOf();if(e instanceof Node)return`<RunTimeNode: ${e.constructor.name}>`;switch(typeof e){case"object":if(Array.isArray(e)){n+="[";for(let r of e)try{n+=str(r,t+1)+", "}catch(e){n+="<large property>, "}e.length&&(n=n.substring(0,n.length-2)),n+="]"}else{try{n+=e.constructor.name}catch(e){n+="UNKNOWN_CONSTRUCTOR"}n+=": {\n";let r=0;for(let o in e)r++,e.hasOwnProperty&&e.hasOwnProperty(o)&&(n+=`  ${o}: ${str(e[o],t+1)||""}, \n`);r>0&&(n=n.substring(0,n.length-3)),n+="\n}\n"}break;case"string":n=`'${e}'`;break;case"bigint":case"number":case"boolean":n=`${e}`;break;case"undefined":n="<NativeUndefined>";break;case"function":n=`<NativeFunction ${e.name}>`}for(let e=0;e<t;e++)n=indent(n);return n}export const sleep=e=>new Promise((t=>setTimeout((()=>t()),e)));export function indent(e){return e.replace(/\n/g,"\n    ")}