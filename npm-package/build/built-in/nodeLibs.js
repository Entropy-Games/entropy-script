import{Position}from"../position.js";import{Context}from"../runtime/context.js";import{ESError,ImportError}from"../errors.js";import{ESFunction,ESNamespace,ESObject,ESString,types}from"../runtime/primitiveTypes.js";import{str}from"../util/util.js";import{run}from"../index.js";import{addModuleFromObj,getModule,moduleExist}from"./builtInModules.js";import http from"./built-in-modules/http.js";function addNodeLibs(t,r,o,n,e,i){addModuleFromObj("http",http(t,r,o,n,e,i)),e.set("import",new ESFunction((({context:t},r)=>{const n=str(r);if(moduleExist(n))return getModule(n);try{if(!o.existsSync(n))return new ESError(Position.unknown,"ImportError",`Can't find file '${n}' to import.`);const r=o.readFileSync(n,"utf-8"),e=new Context;e.parent=t;const s=run(r,{env:e,fileName:n});return s.error?i(new ImportError(Position.unknown,str(n),s.error.str).str):new ESNamespace(new ESString(n),e.getSymbolTableAsDict())}catch(t){return new ESError(Position.unknown,"ImportError",t.toString())}}),[{name:"path",type:types.string}],"import",void 0,types.object),{forceThroughConst:!0,isConstant:!0}),e.setOwn("open",new ESFunction(((t,r)=>{const n=t.valueOf(),e=(null==r?void 0:r.valueOf())||"utf-8";return new ESObject({str:new ESFunction((({context:t})=>new ESString(o.readFileSync(n,e))),[],"str",void 0,types.string),write:new ESFunction((({context:t},r)=>{o.writeFileSync(n,str(r))})),append:new ESFunction((({context:t},r)=>{o.appendFileSync(n,str(r))}))})})))}export default addNodeLibs;