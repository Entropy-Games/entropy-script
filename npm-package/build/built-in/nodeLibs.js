import{Position}from"../position.js";import{Context}from"../runtime/context.js";import{ESError,ImportError}from"../errors.js";import{ESFunction,ESNamespace,ESObject,ESString,types}from"../runtime/primitiveTypes.js";import{str}from"../util/util.js";import{run}from"../index.js";import{addModuleFromObj,getModule,moduleExist}from"./builtInModules.js";import http from"./built-in-modules/http.js";function addNodeLibs(t,r,n,o,e,i){addModuleFromObj("http",http(t,r,n,o,e,i)),e.set("import",new ESFunction((({context:t},r)=>{let o=str(r);if(moduleExist(o))return getModule(o);try{if(!n.existsSync(o)){if(!n.existsSync("./particles/"+o))return new ESError(Position.unknown,"ImportError",`Can't find file '${o}' to import.`);o="particles/"+o+"/main.es"}const r=n.readFileSync(o,"utf-8"),e=new Context;e.parent=t;const i=run(r,{env:e,fileName:o});return i.error?new ImportError(Position.unknown,str(o),i.error.str):new ESNamespace(new ESString(o),e.getSymbolTableAsDict())}catch(t){return new ESError(Position.unknown,"ImportError",t.toString())}}),[{name:"path",type:types.string}],"import",void 0,types.object),{forceThroughConst:!0,isConstant:!0}),e.setOwn("open",new ESFunction((({context:t},r,o)=>{const e=str(r),i=str(o)||"utf-8";return n.existsSync(e)?new ESObject({str:new ESFunction((({context:t})=>new ESString(n.readFileSync(e,i))),[],"str",void 0,types.string),write:new ESFunction((({context:t},r)=>{n.writeFileSync(e,str(r))})),append:new ESFunction((({context:t},r)=>{n.appendFileSync(e,str(r))}))}):new ImportError(Position.unknown,e)})))}export default addNodeLibs;