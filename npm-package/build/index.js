import"./util/colourString.js";import{Lexer}from"./tokenise/lexer.js";import{Parser}from"./parse/parser.js";import{global,now}from"./constants.js";import{initialise}from"./init.js";import{ESError}from"./errors.js";import{Position}from"./position.js";import{interpretResult,Node}from"./runtime/nodes.js";import{ESArray}from"./runtime/primitiveTypes.js";export function init(e=console.log,r,o){initialise(global,e,r,o)}export function run(e,{env:r=global,measurePerformance:o=!1,fileName:t="(unknown)"}={}){Node.maxTime=0,Node.totalTime=0,Node.interprets=0;const n={total:0,lexerTotal:0,parserTotal:0,interpretTotal:0,nodeMax:0,nodeAvg:0,nodeTotal:0,interprets:0};let i=now();if(!r.root.initialisedAsGlobal){const e=new interpretResult;return e.error=new ESError(Position.unknown,"Uninitialised","Global context has not been initialised with global values"),e}const s=new Lexer(e,t),[a,l]=s.generate();if(l){const e=new interpretResult;return e.error=l,e}n.lexerTotal=now()-i,i=now();const p=new Parser(a).parse();if(p.error){const e=new interpretResult;return e.error=p.error,e}if(n.parserTotal=now()-i,i=now(),!p.node){const e=new interpretResult;return e.val=new ESArray([]),e}const m=p.node.interpret(r);return n.interpretTotal=now()-i,n.total=now()-i,n.nodeMax=Node.maxTime,n.nodeTotal=Node.totalTime,n.nodeAvg=Node.totalTime/Node.interprets,n.interprets=Node.interprets,o&&console.log(n),Object.assign(Object.assign({},m),{timeData:n})}