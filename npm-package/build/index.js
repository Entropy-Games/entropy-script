import"./util/colourString.js";import{Lexer}from"./tokenise/lexer.js";import{Parser}from"./parse/parser.js";import{global,now}from"./constants.js";import{initialise}from"./init.js";import{ESError}from"./errors.js";import{Position}from"./position.js";import{interpretResult,Node}from"./runtime/nodes.js";import{ESArray}from"./runtime/primitiveTypes.js";export function init(e=console.log,r){initialise(global,e,r)}export function run(e,{env:r=global,measurePerformance:t=!1,fileName:o="(unknown)",currentDir:n="./"}={}){r.importPaths.push(n),Node.maxTime=0,Node.totalTime=0,Node.interprets=0;const i={total:0,lexerTotal:0,parserTotal:0,interpretTotal:0,nodeMax:0,nodeAvg:0,nodeTotal:0,interprets:0};let s=now();if(!r.root.initialisedAsGlobal){const e=new interpretResult;return e.error=new ESError(Position.unknown,"Uninitialised","Global context has not been initialised with global values"),e}const a=new Lexer(e,o),[l,p]=a.generate();if(p){const e=new interpretResult;return e.error=p,e}i.lexerTotal=now()-s,s=now();const m=new Parser(l).parse();if(m.error){const e=new interpretResult;return e.error=m.error,e}if(i.parserTotal=now()-s,s=now(),!m.node){const e=new interpretResult;return e.val=new ESArray([]),e}const u=m.node.interpret(r);return i.interpretTotal=now()-s,i.total=now()-s,i.nodeMax=Node.maxTime,i.nodeTotal=Node.totalTime,i.nodeAvg=Node.totalTime/Node.interprets,i.interprets=Node.interprets,t&&console.log(i),Object.assign(Object.assign({},u),{timeData:i})}