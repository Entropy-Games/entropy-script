var __awaiter=this&&this.__awaiter||function(t,n,o,i){return new(o||(o=Promise))((function(r,e){function s(t){try{l(i.next(t))}catch(t){e(t)}}function u(t){try{l(i.throw(t))}catch(t){e(t)}}function l(t){var n;t.done?r(t.value):(n=t.value,n instanceof o?n:new o((function(t){t(n)}))).then(s,u)}l((i=i.apply(t,n||[])).next())}))};import{builtInFunctions}from"./built-in/builtInFunctions.js";import{getModule,moduleExist}from"./built-in/builtInModules.js";import{Context}from"./runtime/context.js";import{ESError,ImportError}from"./errors.js";import{Position}from"./position.js";import{run}from"./index.js";import{IS_NODE_INSTANCE}from"./constants.js";import{str}from"./util/util.js";import{ESFunction,ESNamespace,ESString}from"./runtime/primitiveTypes.js";import{globalConstants}from"./built-in/globalConstants.js";export function initialise(t,n,o){builtInFunctions.import=[({context:o},i,r)=>{if(IS_NODE_INSTANCE)return new ESError(Position.unknown,"ImportError","Is running in node instance but trying to run browser import function");const e=i.str();if(moduleExist(str(e)))return getModule(str(e));try{fetch(str(e)).then((t=>t.text())).then((i=>__awaiter(this,void 0,void 0,(function*(){const s=new Context;s.parent=t;const u=yield run(i);u.error?n(new ImportError(Position.unknown,str(e),u.error.str).str):r instanceof ESFunction&&r.__call__({context:o},new ESNamespace(e,s.getSymbolTableAsDict()))}))))}catch(t){return new ESError(Position.unknown,"ImportError",t.toString())}},{}],builtInFunctions.print=[({context:t},...o)=>{let i="";for(let t of o)i+=str(t);n(i)},{}],builtInFunctions.input=[({context:t},n,i)=>{o(n.valueOf(),(n=>{let o=null==i?void 0:i.valueOf();if(o instanceof ESFunction){let i=o.__call__({context:t},new ESString(n));i instanceof ESError&&console.log(i.str)}else"function"==typeof o&&o(n);return new ESString("'input()' does not return anything. Pass in a function as the second argument, which will take the user input as an argument.")}))},{}];for(let n in builtInFunctions){const o=new ESFunction(builtInFunctions[n][0],[],n);o.info=builtInFunctions[n][1],o.info.name=n,o.info.isBuiltIn=!0,o.info.file="built-in",t.set(n,o,{global:!0,isConstant:!0})}for(let n in globalConstants){const o=globalConstants[n];t.set(n,o,{global:!0,isConstant:!0})}t.initialisedAsGlobal=!0}