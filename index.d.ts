// Generated by dts-bundle v0.7.3

declare module 'entropy-script' {
    import { GLOBAL_CTX, ICompileConfig, now, refreshPerformanceNow, runningInNode, setGlobalContext, VERSION } from "entropy-script/util/constants";
    import Position from "entropy-script/position";
    import { InterpretResult } from "entropy-script/runtime/nodes";
    import { Context } from "entropy-script/runtime/context";
    import colours from 'entropy-script/util/colours';
    import { Config } from "entropy-script/config";
    import init from 'entropy-script/init';
    export * from 'entropy-script/runtime/primitiveTypes';
    export { IS_NODE_INSTANCE, libs, CONFIG_FILE_NAME } from 'entropy-script/util/constants';
    export * from 'entropy-script/errors';
    export * from 'entropy-script/runtime/nodes';
    export * from 'entropy-script/util/util';
    export { strip, wrap } from 'entropy-script/runtime/wrapStrip';
    export { ESSymbol } from 'entropy-script/runtime/symbol';
    export { parseConfig } from 'entropy-script/config';
    export { init, VERSION, GLOBAL_CTX as global, setGlobalContext, now, refreshPerformanceNow, ICompileConfig, runningInNode, Config, Context, colours, Position };
    export function run(msg: string, { env, fileName, currentDir }?: {
        env?: Context | undefined;
        fileName?: string | undefined;
        currentDir?: string | undefined;
    }): InterpretResult;
}

declare module 'entropy-script/util/constants' {
    import type { Context } from 'entropy-script/runtime/context';
    import type { Map, EnumMap, NativeObj } from 'entropy-script/util/util';
    import type { ESType } from "entropy-script/runtime/primitives/type";
    export const DIGITS = "0123456789";
    export const IDENTIFIER_CHARS = "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    export const ONE_LINE_COMMENT = "//";
    export const MULTI_LINE_COMMENT_START = "/*";
    export const MULTI_LINE_COMMENT_END = "*/";
    export const WHITESPACE = " \t\n";
    export let GLOBAL_CTX: Context;
    export const setGlobalContext: (c: Context) => void;
    export const STRING_SURROUNDS: string[];
    export let IS_NODE_INSTANCE: boolean;
    export const runningInNode: () => undefined;
    export const VERSION: any;
    export const SCRIPT_EXT = "es";
    export const CONFIG_FILE_NAME = "esconfig.json";
    export const VALID_FILE_ENCODINGS: string[];
    export interface ICompileConfig {
        minify: boolean;
        indent: number;
        symbols: string[];
    }
    export const types: Map<ESType>;
    export const libs: Map<NativeObj>;
    export const CATCH_BLOCK_ERR_SYMBOL_ID = "err";
    export const CLASS_KEYWORDS: string[];
    export let now: () => number;
    export function refreshPerformanceNow(isNode?: boolean): void;
    export enum TokenType {
        NUMBER = 0,
        STRING = 1,
        END_STATEMENT = 2,
        IDENTIFIER = 3,
        COMMA = 4,
        ASSIGN = 5,
        ADD = 6,
        SUB = 7,
        ASTRIX = 8,
        DIV = 9,
        POW = 10,
        MOD = 11,
        OPAREN = 12,
        CPAREN = 13,
        OBRACES = 14,
        CBRACES = 15,
        OSQUARE = 16,
        CSQUARE = 17,
        EQUALS = 18,
        NOT_EQUALS = 19,
        NOT = 20,
        GT = 21,
        LT = 22,
        GTE = 23,
        LTE = 24,
        AND = 25,
        OR = 26,
        COLON = 27,
        DOT = 28,
        EOF = 29,
        PIPE = 30,
        AMPERSAND = 31,
        BITWISE_NOT = 32,
        QM = 33,
        DOUBLE_QM = 34
    }
    export const tt: typeof TokenType;
    export const ttToStr: EnumMap<TokenType, string>;
    export const SINGLE_TOKENS: Map<TokenType>;
    export const DOUBLE_TOKENS: Map<TokenType>;
    export const PROPS_TO_OVERRIDE_ON_PRIM: string[];
    export const STD_RAW: string[];
}

declare module 'entropy-script/position' {
    export default class Position {
        file: string;
        idx: number;
        ln: number;
        col: number;
        constructor(idx: number, ln: number, col: number, file?: string);
        advance(currentChar?: string): this;
        get clone(): Position;
        get str(): string;
        get isVoid(): boolean;
        static get void(): Position;
    }
}

declare module 'entropy-script/runtime/nodes' {
    import Token from "entropy-script/parse/tokens";
    import { Error } from "entropy-script/errors";
    import { Context } from 'entropy-script/runtime/context';
    import Position from "entropy-script/position";
    import { IUninterpretedArgument } from "entropy-script/runtime/argument";
    import { ESObject, Primitive } from "entropy-script/runtime/primitiveTypes";
    import { Map } from 'entropy-script/util/util';
    export class InterpretResult {
        val: Primitive;
        error: Error | undefined;
        funcReturn: Primitive | undefined;
        shouldBreak: boolean;
        shouldContinue: boolean;
        constructor(val?: Primitive | Error);
    }
    export abstract class Node {
        pos: Position;
        protected constructor(pos: Position, isTerminal?: boolean);
        protected abstract interpret_(context: Context): Error | InterpretResult;
        interpret(context: Context): InterpretResult;
        abstract str(): string;
    }
    export class N_binOp extends Node {
        constructor(pos: Position, left: Node, opTok: Token, right: Node);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_unaryOp extends Node {
        constructor(pos: Position, a: Node, opTok: Token);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_varAssign extends Node {
        constructor(pos: Position, varNameTok: Token<string>, value: Node, assignType?: string, isGlobal?: boolean, isConstant?: boolean, isDeclaration?: boolean, type?: Primitive | Node);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_destructAssign extends Node {
        constructor(pos: Position, varNames: string[], types: Node[], value: Node, isGlobal?: boolean, isConstant?: boolean);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_if extends Node {
        constructor(pos: Position, comparison: Node, ifTrue: Node, ifFalse: Node | undefined);
        interpret_(context: Context): InterpretResult;
        str(): string;
    }
    export class N_while extends Node {
        constructor(pos: Position, comparison: Node, loop: Node);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_for extends Node {
        constructor(pos: Position, body: Node, array: Node, identifier: Token<string>, isGlobalIdentifier: boolean, isConstIdentifier: boolean);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_array extends Node {
        constructor(pos: Position, items: Node[], shouldClone?: boolean);
        interpret_(context: Context): InterpretResult;
        str(): string;
    }
    export class N_objectLiteral extends Node {
        constructor(pos: Position, properties: [Node, Node][]);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_statements extends Node {
        constructor(pos: Position, items: Node[], topLevel?: boolean);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_functionCall extends Node {
        constructor(pos: Position, to: Node, args?: Node[], indefiniteKwargs?: Node[], definiteKwargs?: Map<Node>, functionType?: '__call__' | '__generic__', optionallyChained?: boolean);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_functionDefinition extends Node {
        name: string;
        isDeclaration: boolean;
        allowArgs: boolean;
        allowKwargs: boolean;
        constructor(pos: Position, body: Node, argNames: IUninterpretedArgument[], returnType: Node, name?: string, this_?: ESObject, description?: string);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_return extends Node {
        constructor(pos: Position, value: Node | undefined);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_yield extends Node {
        constructor(pos: Position, value: Node | undefined);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_indexed extends Node {
        value?: Node;
        assignType?: string;
        readonly isOptionallyChained: boolean;
        constructor(pos: Position, base: Node, index: Node, isOptionallyChained?: boolean);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_class extends Node {
        name: string;
        constructor(pos: Position, methods: N_functionDefinition[], properties: Map<Node>, extends_?: Node, init?: N_functionDefinition, name?: string, isDeclaration?: boolean, abstract?: boolean);
        interpret_(context: Context): InterpretResult | Error;
        str(): string;
    }
    export class N_tryCatch extends Node {
        constructor(pos: Position, body: Node, catchBlock: Node);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_number extends Node {
        constructor(pos: Position, a: Token<number>);
        interpret_(): InterpretResult | Error;
        str(): string;
    }
    export class N_string extends Node {
        constructor(pos: Position, a: Token<string>);
        interpret_(): InterpretResult | Error;
        str(): string;
    }
    export class N_variable extends Node {
        readonly identifier: Token<string>;
        constructor(a: Token<string>);
        interpret_(context: Context): Error | InterpretResult;
        str(): string;
    }
    export class N_undefined extends Node {
        constructor(pos?: Position);
        interpret_(): InterpretResult;
        str(): string;
    }
    export class N_break extends Node {
        constructor(pos: Position);
        interpret_(): InterpretResult;
        str(): string;
    }
    export class N_continue extends Node {
        constructor(pos: Position);
        interpret_(): InterpretResult;
        str(): string;
    }
    export class N_primitiveWrapper extends Node {
        constructor(val: Primitive, pos?: Position);
        interpret_(): InterpretResult;
        str(): string;
    }
}

declare module 'entropy-script/runtime/context' {
    import { Error } from "entropy-script/errors";
    import { ESFunction, Primitive } from "entropy-script/runtime/primitiveTypes";
    import { Map } from "entropy-script/util/util";
    import { ESSymbol, ISymbolOptions } from 'entropy-script/runtime/symbol';
    export class Context {
        initialisedAsGlobal: boolean;
        deleted: boolean;
        get path(): string;
        set path(val: string);
        get parent(): Context | undefined;
        set parent(val: Context | undefined);
        has(identifier?: string): boolean;
        hasOwn(identifier: string): boolean;
        get(identifier: string): Primitive | Error | undefined;
        getSymbolTableAsDict(): Map<ESSymbol>;
        getSymbol(identifier: string): undefined | ESSymbol | Error;
        set(identifier: string, value: Primitive, options?: ISymbolOptions): void | Error;
        setOwn(identifier: string, value: Primitive, options?: ISymbolOptions): void | Error;
        remove(identifier: string): Error | true;
        clear(): void;
        get root(): Context;
        get keys(): string[];
        clone(): Context;
        log(): void;
    }
    export function generateESFunctionCallContext(self: ESFunction, args: Primitive[], kwargs: Map<Primitive>, parent: Context, dontTypeCheck: boolean): Context | Error;
}

declare module 'entropy-script/util/colours' {
    import type { Map } from 'entropy-script/util/util';
    const c: Map<(s: string | undefined) => string>;
    export default c;
}

declare module 'entropy-script/config' {
    import type { Map } from "entropy-script/util/util";
    export type Permissions = {
        networking: boolean;
        imports: boolean;
        accessDOM: boolean;
        useSTD: boolean;
        fileSystem: boolean;
    } & Map;
    export interface Config {
        permissions: Permissions;
        modules: Map;
    }
    const AllowAny: unique symbol;
    export function defaultPermissions(): Permissions;
    export const config: {
        permissions: Permissions;
        modules: {
            [AllowAny]: string;
        };
    };
    export function parseConfig(configJSON: Map): void;
    export {};
}

declare module 'entropy-script/init' {
    import { NativeObj } from 'entropy-script/index';
    import { Context } from "entropy-script/runtime/context";
    import { Error } from "entropy-script/errors";
    import { Map } from "entropy-script/util/util";
    export default function init({ print, input, node, context, path, libs }?: {
        print?: (...args: any[]) => void;
        input?: (msg: string, cb: (...arg: any[]) => any) => void;
        node?: boolean;
        context?: Context;
        path?: string;
        libs?: Map<[NativeObj, boolean]>;
    }): Promise<Error | Context>;
}

declare module 'entropy-script/runtime/primitiveTypes' {
    import type { IFunctionInfo } from 'entropy-script/runtime/info';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { ESArray } from 'entropy-script/runtime/primitives/array';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESErrorPrimitive } from 'entropy-script/runtime/primitives/error';
    import { ESFunction } from 'entropy-script/runtime/primitives/function';
    import { ESNumber } from 'entropy-script/runtime/primitives/number';
    import { ESObject } from 'entropy-script/runtime/primitives/object';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESType } from 'entropy-script/runtime/primitives/type';
    import { ESNull } from 'entropy-script/runtime/primitives/null';
    import { ESNamespace } from 'entropy-script/runtime/primitives/namespace';
    import { ESJSBinding } from "entropy-script/runtime/primitives/jsbinding";
    import { Primitive } from "entropy-script/util/util";
    export { ESArray, ESBoolean, ESErrorPrimitive, ESFunction, ESNumber, ESPrimitive, ESString, ESObject, ESType, ESNull, ESNamespace, ESJSBinding, Primitive, IFunctionInfo };
    export function initPrimitiveTypes(): void;
}

declare module 'entropy-script/errors' {
    import Position from "entropy-script/position";
    import { Primitive } from "entropy-script/util/util";
    export interface TracebackFrame {
        position: Position;
        line: string;
    }
    export class Error {
        name: string;
        details: string;
        pos: Position;
        traceback: TracebackFrame[];
        constructor(name: string, details: string);
        get colouredStr(): string;
        get str(): string;
        position(pos: Position): this;
    }
    export class IllegalCharError extends Error {
        constructor(char?: string);
    }
    export class InvalidSyntaxError extends Error {
        constructor(details?: string);
    }
    export class TypeError extends Error {
        constructor(expectedType: string, actualType: string, value?: string, detail?: string);
    }
    export class ImportError extends Error {
        constructor(url: string, detail?: string);
    }
    export class ReferenceError extends Error {
        constructor(ref: string);
    }
    export class IndexError extends Error {
        constructor(ref: string, object: Primitive);
    }
    export class InvalidOperationError extends Error {
        constructor(op: string, value: Primitive, detail?: string, pos?: Position);
    }
    export class InvalidRuntimeError extends Error {
        constructor();
    }
    export class TestFailed extends Error {
        constructor(detail: string);
    }
    export class PermissionRequiredError extends Error {
        constructor(detail: string);
    }
    export class MissingNativeDependencyError extends Error {
        constructor(name: string);
    }
    export class EndIterator extends Error {
        constructor();
    }
}

declare module 'entropy-script/util/util' {
    import type { Error } from 'entropy-script/errors';
    import type { Context } from 'entropy-script/runtime/context';
    import type { ESArray, ESBoolean, ESErrorPrimitive, ESFunction, ESJSBinding, ESNull, ESObject, ESString, ESType } from 'entropy-script/runtime/primitiveTypes';
    import { ESNumber } from 'entropy-script/runtime/primitiveTypes';
    import { ESPrimitive } from "entropy-script/runtime/primitive";
    export type EnumMap<T extends number, U = unknown> = {
        [key in T]: U;
    };
    export type Map<T = any> = {
        [key in string | number | symbol]: T;
    };
    export type NativeObj = any;
    export type Primitive = ESPrimitive<NativeObj> | ESJSBinding | ESString | ESType | ESNumber | ESNull | ESBoolean | ESArray | ESObject | ESFunction | ESErrorPrimitive;
    export interface IFuncProps {
        context: Context;
        kwargs?: Map<Primitive>;
        dontTypeCheck?: boolean;
    }
    export type BuiltInFunction = (config: IFuncProps, ...args: Primitive[]) => void | Error | Primitive | Promise<void>;
    export const sleep: (ms: number) => Promise<void>;
    export function indent(str: string, { depth, by, indentStart }?: {
        depth?: number | undefined;
        by?: number | undefined;
        indentStart?: boolean | undefined;
    }): string;
    export function generateRandomSymbol(symbols: string[], length?: number, characters?: string): string;
    export function str(val: unknown, depth?: number): string;
}

declare module 'entropy-script/runtime/wrapStrip' {
    import { IFuncProps, Primitive, NativeObj } from 'entropy-script/util/util';
    export function wrap(thing: any, functionsTakeProps?: boolean): Primitive;
    export function strip(thing: Primitive | undefined, props: IFuncProps): NativeObj;
}

declare module 'entropy-script/runtime/symbol' {
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { IFuncProps, Primitive } from "entropy-script/util/util";
    export interface ISymbolOptions {
        isConstant?: boolean;
        isAccessible?: boolean;
        global?: boolean;
        forceThroughConst?: boolean;
        type?: Primitive;
    }
    export class ESSymbol {
        isConstant: boolean;
        value: Primitive;
        identifier: string;
        isAccessible: boolean;
        type: Primitive;
        constructor(value: Primitive, identifier: string, options?: ISymbolOptions);
        clone: (props: IFuncProps) => ESSymbol;
        str: () => ESString;
    }
}

declare module 'entropy-script/runtime/primitives/type' {
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { Error } from 'entropy-script/errors';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import type { ESFunction } from 'entropy-script/runtime/primitives/function';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import type { IFuncProps, Map, Primitive } from 'entropy-script/util/util';
    export class ESType extends ESPrimitive<undefined> {
        readonly __primordial__: boolean;
        readonly __name__: string;
        readonly __extends__: undefined | ESType;
        readonly __methods__: ESFunction[];
        readonly __properties__: Map<Primitive>;
        readonly __instances__: Primitive[];
        readonly __abstract__: boolean;
        constructor(isPrimitive?: boolean, name?: string, methods?: ESFunction[], properties?: Map<Primitive>, extends_?: ESType, abstract?: boolean);
        clone: () => ESType;
        isa: (props: IFuncProps, type: Primitive) => ESBoolean;
        cast: () => Error;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __subtype_of__: (props: IFuncProps, t: Primitive) => ESBoolean | Error;
        __eq__: (props: IFuncProps, t: Primitive) => ESBoolean | Error;
        __call__: (props: IFuncProps, ...params: Primitive[]) => Error | Primitive;
        str: () => ESString;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        __get__: (props: IFuncProps, k: Primitive) => Primitive | Error;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        keys: () => ESString[];
        __get_init__: () => ESFunction | undefined;
    }
    export class ESTypeUnion extends ESType {
        readonly __left__: Primitive;
        readonly __right__: Primitive;
        constructor(left: Primitive, right: Primitive);
        __call__: () => Error | Primitive;
        __includes__: (props: IFuncProps, t: Primitive) => ESBoolean | Error;
        __subtype_of__: (props: IFuncProps, t: Primitive) => ESBoolean | Error;
        clone: () => ESType;
        __eq__: (props: IFuncProps, t: Primitive) => Error | ESBoolean;
    }
    export class ESTypeNot extends ESType {
        constructor(type: Primitive);
        __call__: () => Error | Primitive;
        __includes__: (props: IFuncProps, t: Primitive) => ESBoolean | Error;
        __subtype_of__: (props: IFuncProps, t: Primitive) => ESBoolean | Error;
        clone: () => ESTypeNot;
        __eq__: (props: IFuncProps, t: Primitive) => Error | ESBoolean;
    }
}

declare module 'entropy-script/parse/tokens' {
    import Position from "entropy-script/position";
    import type { TokenType } from 'entropy-script/util/constants';
    import { NativeObj } from "entropy-script/util/util";
    export default class<T = unknown> {
        type: TokenType;
        value: T;
        pos: Position;
        constructor(pos: Position, type: TokenType, value: T);
        matches(type: TokenType, val: NativeObj): boolean;
    }
}

declare module 'entropy-script/runtime/argument' {
    import { Primitive } from "entropy-script/runtime/primitiveTypes";
    import { Context } from "entropy-script/runtime/context";
    import { Error } from "entropy-script/errors";
    import { Node } from "entropy-script/runtime/nodes";
    export interface IRuntimeArgument {
        name: string;
        type: Primitive;
        defaultValue?: Primitive;
        isKwarg?: boolean;
    }
    export interface IUninterpretedArgument {
        name: string;
        type: Node;
        defaultValue?: Node;
        isKwarg?: boolean;
    }
    export function interpretArgument(arg: IUninterpretedArgument, context: Context): IRuntimeArgument | Error;
}

declare module 'entropy-script/runtime/info' {
    export type Info = IPrimitiveInfo & IFunctionInfo & IObjectInfo;
    export interface IPrimitiveInfo {
        name?: string;
        description?: string;
        file?: string;
        helpLink?: string;
        builtin?: boolean;
    }
    export interface IArgInfo {
        name?: string;
        type?: string;
        description?: string;
        required?: boolean;
        default_value?: string;
    }
    export interface IFunctionInfo extends IPrimitiveInfo {
        args?: IArgInfo[];
        returns?: string;
        returnType?: string;
        allow_args?: boolean;
        allow_kwargs?: boolean;
    }
    export interface IObjectInfo extends IPrimitiveInfo {
        contents?: Info[];
    }
}

declare module 'entropy-script/runtime/primitive' {
    import { Error, TypeError } from 'entropy-script/errors';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import type { ESString } from 'entropy-script/runtime/primitives/string';
    import type { Info } from 'entropy-script/runtime/info';
    import { IFuncProps, NativeObj, Primitive } from 'entropy-script/util/util';
    import type { ESNumber } from "entropy-script/runtime/primitives/number";
    export interface ESPrimitive<T> {
        __add__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __subtract__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __multiply__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __divide__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __pow__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __mod__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __gt__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __lt__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __and__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __or__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __bool__: (props: IFuncProps) => ESBoolean | Error;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __set__: (props: IFuncProps, key: Primitive, value: Primitive) => void | Error;
        __call__: (props: IFuncProps, ...parameters: Primitive[]) => Error | Primitive;
        __iter__: (props: IFuncProps) => Error | Primitive;
        __next__: (props: IFuncProps) => Error | Primitive;
        __nilish__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        isa: (props: IFuncProps, type: Primitive) => ESBoolean | Error;
        is: (props: IFuncProps, obj: Primitive) => ESBoolean;
        __type_name__: () => string;
        has_property: (props: IFuncProps, key: Primitive) => ESBoolean;
    }
    export abstract class ESPrimitive<T> {
        __value__: T;
        __type__: Primitive;
        __info__: Info;
        __iterable__: boolean;
        __null__: boolean;
        protected _: NativeObj;
        protected constructor(value: T, type?: Primitive | false);
        abstract str: (props: IFuncProps, depth: ESNumber) => ESString;
        abstract cast: (config: IFuncProps, type: Primitive) => Primitive | Error;
        __add__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __subtract__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __multiply__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __divide__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __pow__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __mod__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __eq__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __gt__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __lt__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __and__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __or__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __bool__: (props: IFuncProps) => Error | ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __ampersand__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        __set__: (props: IFuncProps, key: Primitive, value: Primitive) => void | Error;
        abstract __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        __call__: (props: IFuncProps, ...parameters: Primitive[]) => Error | Primitive;
        __generic__: (props: IFuncProps, ..._: Primitive[]) => Error | Primitive;
        __iter__: (props: IFuncProps) => Error | Primitive;
        __next__: (props: IFuncProps) => Error | Primitive;
        __nilish__: (props: IFuncProps, n: Primitive) => Error | Primitive;
        abstract bool(props: IFuncProps): ESBoolean;
        abstract clone: (props: IFuncProps) => Primitive;
        isa: (props: IFuncProps, type: Primitive) => Error | ESBoolean;
        is: (props: IFuncProps, obj: Primitive) => ESBoolean;
        abstract keys: (props: IFuncProps) => (ESString | ESNumber)[];
        __type_name__: () => string;
        has_property: (props: IFuncProps, key: Primitive) => ESBoolean;
        describe: (props: IFuncProps, info: Primitive) => void;
        detail: (props: IFuncProps, info: Primitive) => TypeError | undefined;
        abstract __includes__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        abstract __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
    }
}

declare module 'entropy-script/runtime/primitives/array' {
    import { Error } from 'entropy-script/errors';
    import { IFuncProps, Primitive } from 'entropy-script/util/util';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESNumber } from 'entropy-script/runtime/primitives/number';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { Iterable } from "entropy-script/runtime/primitives/iterable";
    export class ESArray extends ESPrimitive<Primitive[]> implements Iterable {
        __iterable__: boolean;
        constructor(values?: Primitive[]);
        len: () => ESNumber;
        cast: (props: IFuncProps, type: Primitive) => Primitive | Error;
        str: (props: IFuncProps, depth?: ESNumber) => ESString;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __add__: (props: IFuncProps, n: Primitive) => ESArray | Error;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        __get__: (props: IFuncProps, key: Primitive) => Primitive;
        __set__: (props: IFuncProps, key: Primitive, value: Primitive) => void;
        contains: (props: IFuncProps, val: Primitive) => ESBoolean;
        clone: () => ESArray;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __iter__: () => ESArray;
        __next__: () => Error | Primitive;
        keys: () => (ESString | ESNumber)[];
        add: (props: IFuncProps, ...args: Primitive[]) => void;
    }
}

declare module 'entropy-script/runtime/primitives/boolean' {
    import { Error, TypeError } from 'entropy-script/errors';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { IFuncProps, Primitive } from 'entropy-script/util/util';
    import { ESNumber } from 'entropy-script/runtime/primitives/number';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    export class ESBoolean extends ESPrimitive<boolean> {
        constructor(val?: boolean);
        __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        cast: (props: IFuncProps, type: Primitive) => Error | ESNumber;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __bool__: () => this;
        __and__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __or__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        str: () => ESString;
        clone: () => ESBoolean;
        bool: () => this;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        keys: () => ESString[];
    }
}

declare module 'entropy-script/runtime/primitives/error' {
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { Error } from 'entropy-script/errors';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import type { IFuncProps, Primitive } from "entropy-script/util/util";
    export class ESErrorPrimitive extends ESPrimitive<Error> {
        constructor(error?: Error);
        __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        cast: () => Error;
        str: () => ESString;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        clone: () => ESErrorPrimitive;
        __includes__: () => Error;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        keys: () => ESString[];
    }
}

declare module 'entropy-script/runtime/primitives/function' {
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { Error } from 'entropy-script/errors';
    import { BuiltInFunction, IFuncProps, Primitive } from 'entropy-script/util/util';
    import { IRuntimeArgument } from 'entropy-script/runtime/argument';
    import { Context } from 'entropy-script/runtime/context';
    import { Node } from 'entropy-script/runtime/nodes';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESObject } from 'entropy-script/runtime/primitives/object';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    export class ESFunction extends ESPrimitive<Node | BuiltInFunction> {
        __args__: IRuntimeArgument[];
        __this__: ESObject;
        __returns__: Primitive;
        __closure__: Context;
        __allow_args__: boolean;
        __allow_kwargs__: boolean;
        takeCallContextAsClosure: boolean;
        __generic_types__: Primitive[];
        readonly __gargs__: IRuntimeArgument[];
        constructor(func?: Node | BuiltInFunction, arguments_?: IRuntimeArgument[], name?: string, this_?: ESObject, returnType?: Primitive, closure?: Context, takeCallContextAsClosure?: boolean, allowArgs?: boolean, allowKwargs?: boolean, gargs?: IRuntimeArgument[]);
        cast: () => Error;
        get name(): string;
        set name(v: string);
        clone: () => ESFunction;
        valueOf: () => this;
        str: () => ESString;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        __call__: ({ context, kwargs, dontTypeCheck }: IFuncProps, ...params: Primitive[]) => Error | Primitive;
        __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        __includes__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __subtype_of__: (props: IFuncProps, n: Primitive) => Error | ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        keys: () => ESString[];
        __generic__: (props: IFuncProps, ...parameters: Primitive[]) => Error | Primitive;
    }
}

declare module 'entropy-script/runtime/primitives/number' {
    import { Error, InvalidSyntaxError, TypeError } from 'entropy-script/errors';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { IFuncProps, Primitive } from 'entropy-script/util/util';
    export class ESNumber extends ESPrimitive<number> {
        constructor(value?: number);
        cast: (props: IFuncProps, type: Primitive) => Primitive | Error;
        str: () => ESString;
        __add__: (props: IFuncProps, n: Primitive) => ESNumber | TypeError;
        __subtract__: (props: IFuncProps, n: Primitive) => ESNumber | TypeError;
        __multiply__: (props: IFuncProps, n: Primitive) => ESNumber | TypeError;
        __divide__: (props: IFuncProps, n: Primitive) => ESNumber | TypeError;
        __pow__: (props: IFuncProps, n: Primitive) => ESNumber | TypeError;
        __mod__: (props: IFuncProps, n: Primitive) => ESNumber | TypeError;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __gt__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __lt__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        clone: () => ESNumber;
        __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        keys: () => ESString[];
        __call__: (props: IFuncProps, ...args: Primitive[]) => ESNumber | InvalidSyntaxError | TypeError;
    }
}

declare module 'entropy-script/runtime/primitives/object' {
    import { Error } from 'entropy-script/errors';
    import { IFuncProps, Map, Primitive } from 'entropy-script/util/util';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESNumber } from 'entropy-script/runtime/primitives/number';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { Iterable } from "entropy-script/runtime/primitives/iterable";
    export class ESObject extends ESPrimitive<Map<Primitive>> implements Iterable {
        __iterable__: boolean;
        __type_map__: Map<Primitive> | undefined;
        constructor(val?: Map<Primitive>);
        cast: (props: IFuncProps, type: Primitive) => Error | ESNumber;
        str: (props: IFuncProps, depth?: ESNumber) => ESString;
        keys: () => ESString[];
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        __add__: (props: IFuncProps, n: Primitive) => Error | ESObject;
        __subtract__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __get__: (props: IFuncProps, k: Primitive) => Primitive | Error;
        __set__: (props: IFuncProps, key: Primitive, value: Primitive) => void | Error;
        has_property: (props: IFuncProps, k: Primitive) => ESBoolean;
        clone: () => ESObject;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean | Error;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __iter__: () => Error | Primitive;
        len: () => ESNumber;
        contains: (props: IFuncProps, k: Primitive) => ESBoolean;
    }
}

declare module 'entropy-script/runtime/primitives/string' {
    import { Error, TypeError } from 'entropy-script/errors';
    import { IFuncProps, Primitive } from 'entropy-script/util/util';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESNumber } from 'entropy-script/runtime/primitives/number';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { Iterable } from "entropy-script/runtime/primitives/iterable";
    export class ESString extends ESPrimitive<string> implements Iterable {
        __iterable__: boolean;
        constructor(value?: string);
        str: () => this;
        cast: (props: IFuncProps, type: Primitive) => Primitive | Error;
        __add__: (props: IFuncProps, n: Primitive) => ESString | TypeError;
        __multiply__: (props: IFuncProps, n: Primitive) => ESString | TypeError;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __gt__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __lt__: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        len: () => ESNumber;
        clone: () => ESString;
        __get__: (props: IFuncProps, key: Primitive) => Primitive;
        __set__: (props: IFuncProps, key: Primitive, value: Primitive) => void;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __iter__: () => Error | Primitive;
        keys: () => (ESString | ESNumber)[];
        contains: (props: IFuncProps, n: Primitive) => ESBoolean | TypeError;
    }
}

declare module 'entropy-script/runtime/primitives/null' {
    import { Error } from 'entropy-script/errors';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { IFuncProps, Primitive } from 'entropy-script/util/util';
    export class ESNull extends ESPrimitive<undefined> {
        __null__: boolean;
        constructor();
        cast: () => Primitive | Error;
        str: () => ESString;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        clone: () => ESNull;
        __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        keys: () => ESString[];
    }
}

declare module 'entropy-script/runtime/primitives/namespace' {
    import { Error } from 'entropy-script/errors';
    import type { Map, IFuncProps, Primitive } from 'entropy-script/util/util';
    import { ESSymbol } from 'entropy-script/runtime/symbol';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import type { Iterable } from "entropy-script/runtime/primitives/iterable";
    import { ESNumber } from "entropy-script/runtime/primitives/number";
    export class ESNamespace extends ESPrimitive<Map<ESSymbol>> implements Iterable {
        __mutable__: boolean;
        __iterable__: boolean;
        constructor(name: ESString, value: Map<ESSymbol>, mutable?: boolean);
        cast: () => Error;
        get name(): ESString;
        set name(v: ESString);
        clone: () => Primitive;
        str: () => ESString;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        __get__: (props: IFuncProps, key: Primitive) => Primitive | Error;
        __set__: (props: IFuncProps, key: Primitive, value: Primitive) => void | Error;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __iter__: (props: IFuncProps) => Error | Primitive;
        len: () => ESNumber;
        keys: () => ESString[];
        contains: (props: IFuncProps, key: Primitive) => ESBoolean;
    }
}

declare module 'entropy-script/runtime/primitives/jsbinding' {
    import { Error } from 'entropy-script/errors';
    import { ESBoolean } from 'entropy-script/runtime/primitives/boolean';
    import { ESString } from 'entropy-script/runtime/primitives/string';
    import { ESPrimitive } from 'entropy-script/runtime/primitive';
    import { IFuncProps, Primitive, NativeObj } from 'entropy-script/util/util';
    import { Iterable } from "entropy-script/runtime/primitives/iterable";
    import { ESNumber } from 'entropy-script/runtime/primitives/number';
    export class ESJSBinding<T = NativeObj> extends ESPrimitive<T> implements Iterable {
        __iterable__: boolean;
        constructor(value: T, name?: string, functionsTakeProps?: boolean, catchErrors?: boolean);
        cast: () => Error | Primitive;
        clone: () => Primitive;
        str: (props: IFuncProps, depth?: ESNumber) => ESString;
        __eq__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __bool__: () => ESBoolean;
        bool: () => ESBoolean;
        __get__: (props: IFuncProps, k: Primitive) => Primitive | Error;
        __set__: (props: IFuncProps, k: Primitive, value: Primitive) => void | Error;
        __call__: (props: IFuncProps, ...args: Primitive[]) => Error | Primitive;
        has_property: (props: IFuncProps, key: Primitive) => ESBoolean;
        __includes__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __subtype_of__: (props: IFuncProps, n: Primitive) => ESBoolean;
        __pipe__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __ampersand__: (props: IFuncProps, n: Primitive) => Primitive | Error;
        __iter__: () => Error | Primitive;
        len: () => ESNumber;
        keys: () => ESString[];
        contains: (props: IFuncProps, key: Primitive) => ESBoolean;
    }
}

declare module 'entropy-script/runtime/primitives/iterable' {
    import type { IFuncProps, Primitive } from "entropy-script/util/util";
    import type { ESNumber } from "entropy-script/runtime/primitives/number";
    import type { Error } from "entropy-script/errors";
    import type { ESBoolean } from "entropy-script/runtime/primitives/boolean";
    export interface Iterable {
        len: (props: IFuncProps) => ESNumber | Error;
        __iter__: (props: IFuncProps) => Error | Primitive;
        contains: (props: IFuncProps, val: Primitive) => ESBoolean | Error;
        map?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        filter?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        find?: (props: IFuncProps) => Primitive | Error;
        indexof?: (props: IFuncProps) => ESNumber | Error;
        at?: (props: IFuncProps) => Primitive | Error;
        for?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        pop?: (props: IFuncProps) => Primitive | Error;
        reduce?: (props: IFuncProps) => Primitive | Error;
        reverse?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        splice?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        insert?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        shift?: (props: IFuncProps) => (Iterable & Primitive) | Error;
        unshift?: (props: IFuncProps) => (Iterable & Primitive) | Error;
    }
}

